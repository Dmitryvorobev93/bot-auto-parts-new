from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database import add_user_car, get_user_cars
from keyboards import get_profile_keyboard, get_main_menu_keyboard, get_cars_keyboard, get_cancel_keyboard

async def show_user_cars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    cars = get_user_cars(user_id)
    
    if not cars:
        await update.message.reply_text(
            "üöó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
            reply_markup=get_cars_keyboard()
        )
        return
    
    cars_text = "üöó <b>–í–∞—à–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:</b>\n\n"
    for car in cars:
        car_id, user_id, brand, model, year = car
        cars_text += f"‚Ä¢ {brand} {model} ({year} –≥–æ–¥)\n"
    
    await update.message.reply_text(
        cars_text,
        parse_mode='HTML',
        reply_markup=get_cars_keyboard()
    )

async def start_adding_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    context.user_data['adding_car'] = True
    context.user_data['car_step'] = 'brand'
    
    await update.message.reply_text(
        "üöó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: Geely, Chery, Haval):",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

async def handle_car_brand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if update.message.text == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        await cancel_adding_car(update, context)
        return
    
    context.user_data['car_brand'] = update.message.text
    context.user_data['car_step'] = 'model'
    
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: Coolray, Tiggo 7, Jolion):",
        reply_markup=get_cancel_keyboard()
    )

async def handle_car_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if update.message.text == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        await cancel_adding_car(update, context)
        return
    
    context.user_data['car_model'] = update.message.text
    context.user_data['car_step'] = 'year'
    
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2022):",
        reply_markup=get_cancel_keyboard()
    )

async def handle_car_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if update.message.text == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        await cancel_adding_car(update, context)
        return
    
    try:
        year = int(update.message.text)
        user_id = update.effective_user.id
        brand = context.user_data.get('car_brand', '')
        model = context.user_data.get('car_model', '')
        
        if not brand or not model:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_cars_keyboard()
            )
            await cancel_adding_car(update, context)
            return
        
        success = add_user_car(user_id, brand, model, year)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"<b>–ú–∞—Ä–∫–∞:</b> {brand}\n"
                f"<b>–ú–æ–¥–µ–ª—å:</b> {model}\n"
                f"<b>–ì–æ–¥:</b> {year}",
                parse_mode='HTML',
                reply_markup=get_cars_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                reply_markup=get_cars_keyboard()
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2022):",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await cancel_adding_car(update, context)

async def cancel_adding_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('adding_car', None)
    context.user_data.pop('car_step', None)
    context.user_data.pop('car_brand', None)
    context.user_data.pop('car_model', None)
    
    if update.message.text != '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            reply_markup=get_cars_keyboard()
        )
    else:
        await update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_cars_keyboard()
        )