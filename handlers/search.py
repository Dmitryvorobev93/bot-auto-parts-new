from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from database import search_parts, add_to_cart
from decorators import check_subscription
from keyboards import get_main_menu_keyboard

async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
    context.user_data['search_mode'] = True
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏' –∏–ª–∏ 'ABC123'\n\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'",
        reply_markup=get_main_menu_keyboard()
    )

async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_query = update.message.text
    
    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    # context.user_data['search_mode'] = False  ‚Üê –≠–¢–£ –°–¢–†–û–ö–£ –£–ë–ò–†–ê–ï–ú!
    
    results = search_parts(search_query)
    
    if not results:
        await update.message.reply_text(
            "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞...",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    for item in results:
        article, name, price, in_stock = item
        keyboard = []
        
        if in_stock:
            keyboard.append([InlineKeyboardButton("‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{article}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É
        keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        text = f"""üîπ {name}
üì¶ –ê—Ä—Ç–∏–∫—É–ª: {article}
üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.
{'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if in_stock else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"""
        
        await update.message.reply_text(text, reply_markup=reply_markup)

@check_subscription
async def add_to_cart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –ø–æ–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "new_search":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–∏—Å–∫—É - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_main_menu_keyboard()
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        context.user_data['search_mode'] = True
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    if query.data.startswith("add_"):
        article = query.data.split("_")[1]
        user_id = query.from_user.id
        
        success = add_to_cart(user_id, article)
        
        if success:
            await query.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", show_alert=True)